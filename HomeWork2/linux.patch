diff --git a/HomeWork2/ssftp-iosched.c b/HomeWork2/ssftp-iosched.c
index 3de89d4..d4cd4eb 100644
--- a/HomeWork2/ssftp-iosched.c
+++ b/HomeWork2/ssftp-iosched.c
@@ -1,5 +1,5 @@
 /*
- * elevator noop
+ * elevator sstf
  */
 #include <linux/blkdev.h>
 #include <linux/elevator.h>
@@ -8,41 +8,76 @@
 #include <linux/slab.h>
 #include <linux/init.h>
 
-struct noop_data {
+struct sstf_data {
 	struct list_head queue;
 };
 
-static void noop_merged_requests(struct request_queue *q, struct request *rq,
+sector_t temp = -1;
+
+static void sstf_merged_requests(struct request_queue *q, struct request *rq,
 				 struct request *next)
 {
 	list_del_init(&next->queuelist);
+    //Print Kernel
+    printk(KERN_INFO "Merged\n");
 }
 
-static int noop_dispatch(struct request_queue *q, int force)
+static int sstf_dispatch(struct request_queue *q, int force)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
+	struct sstf_data *nd = q->elevator->elevator_data;
 
 	if (!list_empty(&nd->queue)) {
 		struct request *rq;
 		rq = list_entry(nd->queue.next, struct request, queuelist);
 		list_del_init(&rq->queuelist);
 		elv_dispatch_sort(q, rq);
+        //Set for use
+        temp = blk_rq_pos(rq);
 		return 1;
 	}
+    //Changed
+    printk(KERN_INFO "Dispatched\n");
 	return 0;
 }
 
-static void noop_add_request(struct request_queue *q, struct request *rq)
+//TODO
+static void sstf_add_request(struct request_queue *q, struct request *rq)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
-
+	struct sstf_data *nd = q->elevator->elevator_data;
+    struct list_head* head;
+    //Check if queue is empty, add new request if empty
+	if(list_empty((&nd->queue)) {
+		list_add(&rq->queuelist, &nd->queue);
+		nd->enqueue = nd->queue.next;
+		nd->queue_count++;
+		return;
+	}
+    //Move through the queue
+	list_for_each(head, &nd->queue) {
+        struct request *entry = list_entry(head, struct request, queueList);
+        printk(KERN_INFO "Cycle through queue\n");
+        sector_t new_sector = blk_rq_pos(rq);
+        sector_t cur_sector = blk_rq_pos(c);
+        if(temp>blk_rq_pos(rq)){
+            if (new_sector>cur_sector || cur_sector > temp) {
+                break;
+            }
+        } else {
+            if (cur_sector > temp && new_sector > cur_sector) {
+                break;
+            }
+        }
+    }
+	//Adds to the tail
 	list_add_tail(&rq->queuelist, &nd->queue);
+    printk(KERN_INFO "Adding Finished\n");
+    printk(KERN_INFO "Count: %d\n",nd->queue_count);
 }
 
 static struct request *
-noop_former_request(struct request_queue *q, struct request *rq)
+sstf_former_request(struct request_queue *q, struct request *rq)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
+	struct sstf_data *nd = q->elevator->elevator_data;
 
 	if (rq->queuelist.prev == &nd->queue)
 		return NULL;
@@ -50,18 +85,19 @@ noop_former_request(struct request_queue *q, struct request *rq)
 }
 
 static struct request *
-noop_latter_request(struct request_queue *q, struct request *rq)
+sstf_latter_request(struct request_queue *q, struct request *rq)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
-
+	struct sstf_data *nd = q->elevator->elevator_data;
+    //Print Kernel
+    printk(KERN_INFO "Latter\n");
 	if (rq->queuelist.next == &nd->queue)
 		return NULL;
 	return list_entry(rq->queuelist.next, struct request, queuelist);
 }
 
-static int noop_init_queue(struct request_queue *q, struct elevator_type *e)
+static int sstf_init_queue(struct request_queue *q, struct elevator_type *e)
 {
-	struct noop_data *nd;
+	struct sstf_data *nd;
 	struct elevator_queue *eq;
 
 	eq = elevator_alloc(q, e);
@@ -80,45 +116,49 @@ static int noop_init_queue(struct request_queue *q, struct elevator_type *e)
 	spin_lock_irq(q->queue_lock);
 	q->elevator = eq;
 	spin_unlock_irq(q->queue_lock);
+    //Print Kernel
+    printk(KERN_INFO "init queue\n");
 	return 0;
 }
 
-static void noop_exit_queue(struct elevator_queue *e)
+static void sstf_exit_queue(struct elevator_queue *e)
 {
-	struct noop_data *nd = e->elevator_data;
+	struct sstf_data *nd = e->elevator_data;
 
 	BUG_ON(!list_empty(&nd->queue));
 	kfree(nd);
+    //Print Kernel
+    printk(KERN_INFO "exit queue");
 }
 
-static struct elevator_type elevator_noop = {
+static struct elevator_type elevator_sstf = {
 	.ops = {
-		.elevator_merge_req_fn		= noop_merged_requests,
-		.elevator_dispatch_fn		= noop_dispatch,
-		.elevator_add_req_fn		= noop_add_request,
-		.elevator_former_req_fn		= noop_former_request,
-		.elevator_latter_req_fn		= noop_latter_request,
-		.elevator_init_fn		= noop_init_queue,
-		.elevator_exit_fn		= noop_exit_queue,
+		.elevator_merge_req_fn		= sstf_merged_requests,
+		.elevator_dispatch_fn		= sstf_dispatch,
+		.elevator_add_req_fn		= sstf_add_request,
+		.elevator_former_req_fn		= sstf_former_request,
+		.elevator_latter_req_fn		= sstf_latter_request,
+		.elevator_init_fn		= sstf_init_queue,
+		.elevator_exit_fn		= sstf_exit_queue,
 	},
-	.elevator_name = "noop",
+	.elevator_name = "sstf",
 	.elevator_owner = THIS_MODULE,
 };
 
-static int __init noop_init(void)
+static int __init sstf_init(void)
 {
-	return elv_register(&elevator_noop);
+	return elv_register(&elevator_sstf);
 }
 
-static void __exit noop_exit(void)
+static void __exit sstf_exit(void)
 {
-	elv_unregister(&elevator_noop);
+	elv_unregister(&elevator_sstf);
 }
 
-module_init(noop_init);
-module_exit(noop_exit);
+module_init(sstf_init);
+module_exit(sstf_exit);
 
 
-MODULE_AUTHOR("Jens Axboe");
+MODULE_AUTHOR("group13");
 MODULE_LICENSE("GPL");
-MODULE_DESCRIPTION("No-op IO scheduler");
+MODULE_DESCRIPTION("sstf IO scheduler");
